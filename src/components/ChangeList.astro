---
import { compareVersions, getPreviousVersion } from "@lib/swagger";
import { DescriptionToggle } from "./DescriptionToggle";
import { CollapsableItem } from "./CollapsableItem";
import type { GVK } from "@lib/kube";

type Props = {
  version: string;
  gvk: GVK;
  defaultOpen: boolean;
};
const { version, gvk, defaultOpen } = Astro.props;

const previous = getPreviousVersion(version);
if (!previous) {
  return null;
}

const changes = await compareVersions(previous, version, gvk);

const added = changes.filter((change) => change.type === "new");
const removed = changes.filter((change) => change.type === "removed");
const updated = changes.filter((change) => change.type === "description");
const isNewGVK =
  changes.filter((change) => change.type === "new-gvk").length > 0;
---

<CollapsableItem
  client:load
  defaultOpen={defaultOpen}
  added={added.length}
  removed={removed.length}
  updated={updated.length}
  title={`Kubernetes v${version}`}
>
  {
    changes.length === 0 && (
      <p class="text-muted-foreground text-sm">Nothing changed</p>
    )
  }

  {
    isNewGVK && (
      <p class="text-muted-foreground text-sm">
        <span class="text-success">{gvk.kind}</span> was introduced on this
        version of Kubernetes
      </p>
    )
  }

  {
    added.length > 0 && (
      <>
        <p class="text-muted-foreground text-sm">
          {added.length}
          {added.length === 1 ? "property has" : "properties have"} been added
          on this version
        </p>

        {
          <ul class="mb-2">
            {added.map((change) => (
              <DescriptionToggle
                client:load
                path={change.path}
                description={change.description}
                color="text-success"
              />
            ))}
          </ul>
        }
      </>
    )
  }

  {
    removed.length > 0 && (
      <>
        <p class="text-muted-foreground text-sm">
          {removed.length}
          {removed.length === 1 ? "property has" : "properties have"} been
          removed on this version
        </p>

        <ul class="mb-2">
          {removed.map((change) => (
            <DescriptionToggle
              client:load
              path={change.path}
              description={change.description}
              color="text-destructive"
            />
          ))}
        </ul>
      </>
    )
  }

  {
    updated.length > 0 && (
      <>
        <p class="text-muted-foreground text-sm">
          {updated.length}
          {updated.length === 1 ? "property has" : "properties have"} changed
          the description
        </p>

        <ul class="mb-2">
          {updated.map((update) => (
            <DescriptionToggle
              client:load
              path={update.path}
              description={update.previous}
              description2={update.next}
              color="text-warning"
            />
          ))}
        </ul>
      </>
    )
  }
</CollapsableItem>
